// Test de validation des GIEs pour l'investissement
// Ce script teste les diff√©rents cas de validation d'un GIE avant investissement

const request = require('supertest');
const app = require('../server');

const testValidationGIE = async () => {
  console.log('üß™ Test de validation des GIEs pour investissement');
  console.log('=' .repeat(60));

  // Cas 1: GIE inexistant
  console.log('\n1Ô∏è‚É£ Test avec GIE inexistant:');
  try {
    const gieIdInexistant = '6507d2b8e123456789abcdef';
    const response = await request(app)
      .get(`/api/investissements/gie/${gieIdInexistant}`)
      .set('Authorization', 'Bearer YOUR_TEST_TOKEN'); // Remplacer par un vrai token

    console.log(`   Status: ${response.status}`);
    console.log(`   Message: ${response.body.message}`);
    console.log(`   Code: ${response.body.code}`);
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
  }

  // Cas 2: GIE non valid√©
  console.log('\n2Ô∏è‚É£ Test avec GIE non valid√©:');
  try {
    // Vous devrez remplacer par un ID de GIE r√©el avec statut 'en_attente'
    const gieIdNonValide = 'REMPLACER_PAR_ID_REEL';
    const response = await request(app)
      .get(`/api/investissements/gie/${gieIdNonValide}/calendrier`)
      .set('Authorization', 'Bearer YOUR_TEST_TOKEN'); // Remplacer par un vrai token

    console.log(`   Status: ${response.status}`);
    console.log(`   Message: ${response.body.message}`);
    console.log(`   Code: ${response.body.code}`);
    if (response.body.data) {
      console.log(`   Statut GIE: ${response.body.data.gieStatut}`);
      console.log(`   Nom GIE: ${response.body.data.nomGIE}`);
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
  }

  // Cas 3: GIE valid√© (succ√®s attendu)
  console.log('\n3Ô∏è‚É£ Test avec GIE valid√©:');
  try {
    // Vous devrez remplacer par un ID de GIE r√©el avec statut 'valid√©'
    const gieIdValide = 'REMPLACER_PAR_ID_REEL';
    const response = await request(app)
      .get(`/api/investissements/gie/${gieIdValide}/stats`)
      .set('Authorization', 'Bearer YOUR_TEST_TOKEN'); // Remplacer par un vrai token

    console.log(`   Status: ${response.status}`);
    console.log(`   Message: ${response.body.message || 'Succ√®s'}`);
    if (response.body.success) {
      console.log(`   ‚úÖ Validation r√©ussie`);
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
  }

  // Cas 4: Tentative d'investissement avec GIE non valid√©
  console.log('\n4Ô∏è‚É£ Test d\'investissement avec GIE non valid√©:');
  try {
    const gieIdNonValide = 'REMPLACER_PAR_ID_REEL';
    const response = await request(app)
      .post(`/api/investissements/gie/${gieIdNonValide}/investir`)
      .send({
        date: new Date().toISOString().split('T')[0],
        montant: 6000,
        commentaire: 'Test d\'investissement'
      })
      .set('Authorization', 'Bearer YOUR_TEST_TOKEN'); // Remplacer par un vrai token

    console.log(`   Status: ${response.status}`);
    console.log(`   Message: ${response.body.message}`);
    console.log(`   Code: ${response.body.code}`);
  } catch (error) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
  }

  console.log('\nüéâ Tests termin√©s !');
  console.log('\nCodes d\'erreur document√©s:');
  console.log('   - GIE_NOT_FOUND: GIE inexistant');
  console.log('   - GIE_NOT_VALIDATED: GIE non valid√© pour investissement');
  console.log('   - CYCLE_NOT_FOUND: Cycle d\'investissement inexistant');
  console.log('   - MISSING_GIE_ID: ID du GIE manquant');
};

// Guide d'utilisation
console.log('üìã Guide d\'utilisation de la validation GIE:');
console.log('');
console.log('1. Middleware validateGIEMiddleware:');
console.log('   - V√©rifie l\'existence du GIE');
console.log('   - V√©rifie que le statut est "valid√©"');
console.log('   - Utilis√© pour les op√©rations d\'investissement');
console.log('');
console.log('2. Middleware validateGIEExistenceMiddleware:');
console.log('   - V√©rifie seulement l\'existence du GIE');
console.log('   - Utilis√© pour la consultation de donn√©es');
console.log('');
console.log('3. R√©ponses d\'erreur structur√©es:');
console.log('   - success: false');
console.log('   - message: Description de l\'erreur');
console.log('   - code: Code d\'erreur standardis√©');
console.log('   - data: Informations suppl√©mentaires si n√©cessaire');
console.log('');
console.log('4. Utilisation dans les routes:');
console.log('   router.post(\'/investir\', auth, validateGIEMiddleware, controller);');
console.log('   router.get(\'/stats\', auth, validateGIEExistenceMiddleware, controller);');
console.log('');

// Exemples de r√©ponses
console.log('üìù Exemples de r√©ponses d\'erreur:');
console.log('');
console.log('GIE non trouv√©:');
console.log(JSON.stringify({
  success: false,
  message: 'GIE non trouv√©. Veuillez vous assurer que le GIE est enregistr√©.',
  code: 'GIE_NOT_FOUND'
}, null, 2));
console.log('');
console.log('GIE non valid√©:');
console.log(JSON.stringify({
  success: false,
  message: 'Le GIE "FEVEO-DK-DK-01-01-001" n\'est pas encore valid√©. Statut actuel: en_attente.',
  code: 'GIE_NOT_VALIDATED',
  data: {
    gieStatut: 'en_attente',
    nomGIE: 'FEVEO-DK-DK-01-01-001',
    identifiantGIE: 'FEVEO-DK-DK-01-01-001',
    dateCreation: '2025-07-30T12:00:00.000Z'
  }
}, null, 2));

module.exports = { testValidationGIE };
