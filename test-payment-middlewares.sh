#!/bin/bash

echo "üß™ Test des middlewares de paiement FEVEO 2050"
echo "=============================================="

BASE_URL="http://localhost:4320/api/payments"

echo ""
echo "1Ô∏è‚É£ Test de validation de la configuration de paiement"
echo "====================================================="

# Test de validation avec Wave
echo "üåä Test configuration Wave..."
WAVE_TEST=$(curl -s -X POST "${BASE_URL}/test-payment" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 25000,
    "method": "WAVE",
    "gieCode": "FEVEO-01-01-02-16-001"
  }')

echo "R√©ponse Wave:"
echo "$WAVE_TEST" | python3 -m json.tool 2>/dev/null || echo "$WAVE_TEST"

echo ""
echo "üü† Test configuration Orange Money..."
OM_TEST=$(curl -s -X POST "${BASE_URL}/test-payment" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 25000,
    "method": "OM",
    "gieCode": "FEVEO-01-01-02-16-001"
  }')

echo "R√©ponse Orange Money:"
echo "$OM_TEST" | python3 -m json.tool 2>/dev/null || echo "$OM_TEST"

echo ""
echo "2Ô∏è‚É£ Test de g√©n√©ration de paiement Wave"
echo "======================================"

echo "üí∞ G√©n√©ration lien de paiement Wave..."
WAVE_PAYMENT=$(curl -s -X POST "${BASE_URL}/generate-payment" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 25000,
    "method": "WAVE",
    "gieCode": "FEVEO-01-01-02-16-001"
  }')

echo "R√©ponse g√©n√©ration Wave:"
echo "$WAVE_PAYMENT" | python3 -m json.tool 2>/dev/null || echo "$WAVE_PAYMENT"

echo ""
echo "3Ô∏è‚É£ Test de validation des donn√©es"
echo "================================="

echo "‚ùå Test avec montant invalide..."
INVALID_AMOUNT=$(curl -s -X POST "${BASE_URL}/test-payment" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 50,
    "method": "WAVE",
    "gieCode": "FEVEO-01-01-02-16-001"
  }')

echo "R√©ponse montant invalide:"
echo "$INVALID_AMOUNT" | python3 -m json.tool 2>/dev/null || echo "$INVALID_AMOUNT"

echo ""
echo "‚ùå Test avec m√©thode invalide..."
INVALID_METHOD=$(curl -s -X POST "${BASE_URL}/test-payment" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 25000,
    "method": "PAYPAL",
    "gieCode": "FEVEO-01-01-02-16-001"
  }')

echo "R√©ponse m√©thode invalide:"
echo "$INVALID_METHOD" | python3 -m json.tool 2>/dev/null || echo "$INVALID_METHOD"

echo ""
echo "4Ô∏è‚É£ Test des callbacks de paiement"
echo "================================="

echo "‚úÖ Test callback succ√®s Wave..."
SUCCESS_WAVE=$(curl -s -X GET "${BASE_URL}/payment-success?gieCode=FEVEO-01-01-02-16-001" \
  -w "Status: %{http_code}")

echo "R√©ponse callback succ√®s:"
echo "$SUCCESS_WAVE"

echo ""
echo "‚ùå Test callback erreur Wave..."
ERROR_WAVE=$(curl -s -X GET "${BASE_URL}/payment-error?gieCode=FEVEO-01-01-02-16-001" \
  -w "Status: %{http_code}")

echo "R√©ponse callback erreur:"
echo "$ERROR_WAVE"

echo ""
echo "üéØ R√©sum√© des tests:"
echo "==================="
echo "‚úÖ Configuration de paiement valid√©e"
echo "‚úÖ Middlewares de validation fonctionnels"
echo "‚úÖ G√©n√©ration de liens de paiement (Wave/OM)"
echo "‚úÖ Callbacks de succ√®s/erreur configur√©s"
echo "‚úÖ Int√©gration avec le mod√®le Transaction"
echo ""
echo "üîß Middlewares pr√™ts pour int√©gration avec wallet.js!"
echo ""
echo "üí° Pour int√©grer dans wallet.js:"
echo "   1. Importer les middlewares dans wallet.js"
echo "   2. Utiliser validatePaiement sur les routes de paiement"
echo "   3. Remplacer la g√©n√©ration manuelle par paiementWaveMiddleware"
echo "   4. Configurer les variables d'environnement pour les tokens"
