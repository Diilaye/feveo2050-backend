// Script d'initialisation MongoDB pour Node.js
// √Ä utiliser pour tester la connexion et initialiser la base de donn√©es

const { MongoClient } = require('mongodb');
require('dotenv').config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://admin:password123@localhost:27017/feveo2050?authSource=admin';

async function initializeDatabase() {
  const client = new MongoClient(MONGODB_URI);

  try {
    console.log('üöÄ Connexion √† MongoDB...');
    await client.connect();
    
    const db = client.db('feveo2050');
    
    // V√©rifier si les collections existent d√©j√†
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(col => col.name);
    
    console.log('üìã Collections existantes:', collectionNames);
    
    // Cr√©er les collections si elles n'existent pas
    const requiredCollections = ['utilisateurs', 'gies', 'adhesions', 'cycleinvestissements'];
    
    for (const collectionName of requiredCollections) {
      if (!collectionNames.includes(collectionName)) {
        await db.createCollection(collectionName);
        console.log(`‚úÖ Collection "${collectionName}" cr√©√©e`);
      } else {
        console.log(`‚ÑπÔ∏è  Collection "${collectionName}" existe d√©j√†`);
      }
    }
    
    // Cr√©er des index pour optimiser les performances
    console.log('üîß Cr√©ation des index...');
    
    // Index pour les utilisateurs
    await db.collection('utilisateurs').createIndex({ email: 1 }, { unique: true });
    await db.collection('utilisateurs').createIndex({ telephone: 1 }, { unique: true, sparse: true });
    
    // Index pour les GIE
    await db.collection('gies').createIndex({ nom: 1 });
    await db.collection('gies').createIndex({ statut: 1 });
    
    // Index pour les adh√©sions
    await db.collection('adhesions').createIndex({ utilisateurId: 1 });
    await db.collection('adhesions').createIndex({ gieId: 1 });
    
    // Index pour les cycles d'investissement
    await db.collection('cycleinvestissements').createIndex({ gieId: 1 });
    await db.collection('cycleinvestissements').createIndex({ statut: 1 });
    
    console.log('‚úÖ Index cr√©√©s avec succ√®s');
    
    // Ins√©rer des donn√©es de test en mode d√©veloppement
    if (process.env.NODE_ENV !== 'production') {
      console.log('üîß Insertion des donn√©es de test...');
      
      // V√©rifier si l'utilisateur admin existe d√©j√†
      const existingAdmin = await db.collection('utilisateurs').findOne({ email: 'admin@test.com' });
      
      if (!existingAdmin) {
        await db.collection('utilisateurs').insertOne({
          nom: 'Admin',
          prenom: 'Test',
          email: 'admin@test.com',
          motDePasse: '$2b$12$example.hash.here',
          role: 'admin',
          permissions: ['all'],
          createdAt: new Date(),
          updatedAt: new Date()
        });
        console.log('‚úÖ Utilisateur admin de test cr√©√©');
      } else {
        console.log('‚ÑπÔ∏è  Utilisateur admin de test existe d√©j√†');
      }
    }
    
    console.log('üéâ Initialisation de la base de donn√©es termin√©e!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// Fonction pour tester la connexion
async function testConnection() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    console.log('üîç Test de connexion √† MongoDB...');
    await client.connect();
    
    // Ping pour v√©rifier la connexion
    await client.db('admin').admin().ping();
    console.log('‚úÖ Connexion MongoDB r√©ussie!');
    
    // Afficher les informations de la base
    const db = client.db('feveo2050');
    try {
      const collections = await db.listCollections().toArray();
      console.log('üìä Informations de la base:', {
        database: 'feveo2050',
        collections: collections.length,
        collectionNames: collections.map(c => c.name)
      });
    } catch (err) {
      console.log('‚ÑπÔ∏è  Connexion r√©ussie mais impossible d\'obtenir les statistiques d√©taill√©es');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error);
    process.exit(1);
  } finally {
    await client.close();
  }
}

// Ex√©cuter selon l'argument pass√©
const command = process.argv[2];

if (command === 'test') {
  testConnection();
} else {
  initializeDatabase();
}
