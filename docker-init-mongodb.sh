#!/bin/bash

# Script pour initialiser la base de donn√©es MongoDB avec Docker Compose
# Usage: ./docker-init-mongodb.sh

echo "üê≥ Initialisation de MongoDB avec Docker Compose..."

# V√©rification pr√©alable: d√©mon Docker disponible
if ! command -v docker &> /dev/null; then
  echo "‚ùå Erreur: Docker n'est pas install√© ou non disponible dans le PATH"
  echo "Installez Docker Desktop pour macOS: https://www.docker.com/products/docker-desktop/"
  exit 1
fi

# Si DOCKER_HOST est d√©fini, avertir (√ßa peut pointer vers un h√¥te inactif)
if [ -n "${DOCKER_HOST:-}" ]; then
  echo "‚ö†Ô∏è  Attention: DOCKER_HOST est d√©fini √† '$DOCKER_HOST'"
  echo "    Si vous utilisez Docker Desktop local, essayez: 'unset DOCKER_HOST'"
fi

# Tester l'acc√®s au daemon Docker
if ! docker info &>/dev/null; then
  echo "‚ùå Impossible de se connecter au d√©mon Docker. Est-il d√©marr√© ?"
  echo "- Sur macOS, lancez Docker Desktop: open -a 'Docker' puis attendez l'√©tat 'Running'"
  echo "- Ou s√©lectionnez le bon contexte: 'docker context use desktop-linux' (ou 'default'/'colima')"
  exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
  if ! command -v docker &> /dev/null || ! docker compose version &> /dev/null; then
    echo "‚ùå Erreur: Docker Compose n'est pas install√©"
    echo "Veuillez installer Docker Compose pour ex√©cuter ce script"
    exit 1
  else
    DOCKER_COMPOSE="docker compose"
  fi
else
  DOCKER_COMPOSE="docker-compose"
fi

# V√©rifier si le docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
  echo "‚ùå Erreur: docker-compose.yml non trouv√©"
  echo "Veuillez ex√©cuter ce script depuis le r√©pertoire contenant docker-compose.yml"
  exit 1
fi

# V√©rifier si MongoDB est en cours d'ex√©cution via Docker Compose
if ! $DOCKER_COMPOSE ps | grep -qE "\b(mongo|mongodb)\b"; then
  echo "üöÄ D√©marrage des services avec Docker Compose..."
  if ! $DOCKER_COMPOSE up -d; then
    echo "‚ùå √âchec du d√©marrage des services via Docker Compose"
    echo "V√©rifiez que Docker est en cours d'ex√©cution et que vous avez le bon contexte"
    exit 1
  fi
  
  # Attendre que MongoDB d√©marre
  echo "‚è≥ Attente du d√©marrage de MongoDB..."
  sleep 10
else
  echo "‚úÖ Services Docker Compose d√©j√† en cours d'ex√©cution"
fi

# Trouver le nom du conteneur MongoDB
CONTAINER_NAME=$($DOCKER_COMPOSE ps -q mongodb 2>/dev/null)
if [ -z "$CONTAINER_NAME" ]; then
  CONTAINER_NAME=$($DOCKER_COMPOSE ps -q mongo 2>/dev/null)
fi
if [ -z "$CONTAINER_NAME" ]; then
  CONTAINER_NAME=$(docker ps --filter "name=feveo2050-mongodb" --format "{{.ID}}" | head -n1)
fi
if [ -z "$CONTAINER_NAME" ]; then
  CONTAINER_NAME=$(docker ps --filter "name=mongo" --format "{{.ID}}" | head -n1)
fi

if [ -z "$CONTAINER_NAME" ]; then
  echo "‚ùå Erreur: Impossible de trouver le conteneur MongoDB"
  echo "V√©rifiez que le service est nomm√© 'mongo' ou 'mongodb' dans votre docker-compose.yml"
  exit 1
fi

echo "üìä Utilisation du conteneur MongoDB: $CONTAINER_NAME"

# Copier le script mongo-init.js dans le conteneur
echo "üìÇ Copie du script dans le conteneur..."
if ! docker cp mongo-init.js $CONTAINER_NAME:/tmp/; then
  echo "‚ùå √âchec de la copie de mongo-init.js dans le conteneur"
  echo "V√©rifiez la pr√©sence de 'mongo-init.js' √† la racine du projet"
  exit 1
fi

# Ex√©cuter le script dans le conteneur
echo "üîß Ex√©cution du script dans le conteneur..."
OUTPUT=""
if docker exec "$CONTAINER_NAME" which mongosh &> /dev/null; then
  OUTPUT=$(docker exec "$CONTAINER_NAME" mongosh --quiet "mongodb://admin:password123@localhost:27017/feveo2050?authSource=admin" /tmp/mongo-init.js 2>&1)
  EXIT_CODE=$?
else
  OUTPUT=$(docker exec "$CONTAINER_NAME" mongo "mongodb://admin:password123@localhost:27017/feveo2050?authSource=admin" /tmp/mongo-init.js 2>&1)
  EXIT_CODE=$?
fi

echo "$OUTPUT"

# Traiter comme succ√®s si l'erreur indique des √©l√©ments d√©j√† existants
if [ $EXIT_CODE -eq 0 ] || echo "$OUTPUT" | grep -qi "already exists"; then
  echo "‚úÖ Base de donn√©es MongoDB initialis√©e (ou d√©j√† initialis√©e)."
  echo "üßπ Nettoyage des fichiers temporaires..."
  docker exec "$CONTAINER_NAME" rm -f /tmp/mongo-init.js >/dev/null 2>&1 || true
  exit 0
else
  echo "‚ùå Erreur lors de l'initialisation de la base de donn√©es MongoDB (code: $EXIT_CODE)"
  echo "Consultez les logs avec: docker logs $CONTAINER_NAME"
  exit 1
fi
